This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-15T20:34:01.761Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
app/.gitignore
app/build.gradle.kts
app/proguard-rules.pro
app/src/androidTest/java/com/example/s24825/ExampleInstrumentedTest.kt
app/src/main/AndroidManifest.xml
app/src/main/java/com/example/s24825/data/dao/FilmDao.kt
app/src/main/java/com/example/s24825/data/database/FilmDatabase.kt
app/src/main/java/com/example/s24825/data/entity/Film.kt
app/src/main/java/com/example/s24825/data/repository/FilmRepository.kt
app/src/main/java/com/example/s24825/FilmotekaApplication.kt
app/src/main/java/com/example/s24825/ui/addedit/AddEditFilmScreen.kt
app/src/main/java/com/example/s24825/ui/addedit/FilmEditViewModel.kt
app/src/main/java/com/example/s24825/ui/components/FilmItem.kt
app/src/main/java/com/example/s24825/ui/components/FilterOptions.kt
app/src/main/java/com/example/s24825/ui/details/FilmDetailsScreen.kt
app/src/main/java/com/example/s24825/ui/details/FilmDetailViewModel.kt
app/src/main/java/com/example/s24825/ui/list/FilmListScreen.kt
app/src/main/java/com/example/s24825/ui/list/FilmListViewModel.kt
app/src/main/java/com/example/s24825/ui/main/MainActivity.kt
app/src/main/java/com/example/s24825/ui/theme/Color.kt
app/src/main/java/com/example/s24825/ui/theme/Theme.kt
app/src/main/java/com/example/s24825/ui/theme/Type.kt
app/src/main/java/com/example/s24825/util/Converters.kt
app/src/main/java/com/example/s24825/util/ImageUtils.kt
app/src/main/res/drawable/ic_launcher_background.xml
app/src/main/res/drawable/ic_launcher_foreground.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
app/src/main/res/values/colors.xml
app/src/main/res/values/strings.xml
app/src/main/res/values/themes.xml
app/src/main/res/xml/backup_rules.xml
app/src/main/res/xml/data_extraction_rules.xml
app/src/test/java/com/example/s24825/ExampleUnitTest.kt
build.gradle.kts
gradle.properties
gradle/libs.versions.toml
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
settings.gradle.kts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
*.iml
.gradle
/local.properties
/.idea/caches
/.idea/libraries
/.idea/modules.xml
/.idea/workspace.xml
/.idea/navEditor.xml
/.idea/assetWizardSettings.xml
.DS_Store
/build
/captures
.externalNativeBuild
.cxx
local.properties

================
File: app/.gitignore
================
/build

================
File: app/build.gradle.kts
================
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    // Replace KAPT with KSP
    // id("org.jetbrains.kotlin.kapt")
    id("com.google.devtools.ksp")
}

android {
    namespace = "com.example.filmoteka"
    compileSdk = 34 // Use 34 to ensure compatibility



    defaultConfig {
        applicationId = "com.example.filmoteka"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
    }

    applicationVariants.all {
        kotlin.sourceSets {
            getByName(name) {
                kotlin.srcDir("build/generated/ksp/$name/kotlin")
            }
        }
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.8" // Compatible with Kotlin 1.9.22
    }
}

dependencies {
    // Core Android dependencies
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
    implementation("androidx.activity:activity-compose:1.8.2")

    // Compose dependencies
    val composeBomVersion = "2023.10.01"
    implementation(platform("androidx.compose:compose-bom:$composeBomVersion"))
    implementation("androidx.compose.ui:ui")
    implementation("androidx.compose.ui:ui-graphics")
    implementation("androidx.compose.ui:ui-tooling-preview")
    implementation("androidx.compose.material3:material3")

    val roomVersion = "2.6.1"
    implementation("androidx.room:room-runtime:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")
    // kapt("androidx.room:room-compiler:$roomVersion") // Remove this line
    ksp("androidx.room:room-compiler:$roomVersion") // Add this line

    // Navigation
    implementation("androidx.navigation:navigation-compose:2.7.7")

    // Coil for image loading
    implementation("io.coil-kt:coil-compose:2.5.0")

    // Testing
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    androidTestImplementation(platform("androidx.compose:compose-bom:$composeBomVersion"))
    androidTestImplementation("androidx.compose.ui:ui-test-junit4")
    debugImplementation("androidx.compose.ui:ui-tooling")
    debugImplementation("androidx.compose.ui:ui-test-manifest")
}

================
File: app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: app/src/androidTest/java/com/example/s24825/ExampleInstrumentedTest.kt
================
package com.example.s24825

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.s24825", appContext.packageName)
    }
}

================
File: app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- Permissions for accessing images from gallery -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
        android:maxSdkVersion="32" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />

    <application
        android:name="com.example.s24825.FilmotekaApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.S24825"
        tools:targetApi="31">
        <activity
            android:name="com.example.s24825.ui.main.MainActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.S24825">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

================
File: app/src/main/java/com/example/s24825/data/dao/FilmDao.kt
================
package com.example.s24825.data.dao

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.Query
import androidx.room.Update
import com.example.s24825.data.entity.Film
import kotlinx.coroutines.flow.Flow


@Dao
interface FilmDao {

    /// TODO: Co znaczy FLOW, KORUTYNA i SUSPEND 
    
    @Query("SELECT * FROM films ORDER BY releaseDate ASC")
    fun getAllFilms(): Flow<List<Film>>

    @Query("SELECT * FROM films WHERE category = :category ORDER BY releaseDate ASC")
    fun getFilmsByCategory(category: String): Flow<List<Film>>

    @Query("SELECT * FROM films WHERE isWatched = :isWatched ORDER BY releaseDate ASC")
    fun getFilmsByWatchStatus(isWatched: Boolean): Flow<List<Film>>

    @Query("SELECT * FROM films WHERE (:category IS NULL OR category = :category) AND (:isWatched IS NULL OR isWatched = :isWatched) ORDER BY releaseDate ASC")
    fun getFilteredFilms(category: String?, isWatched: Boolean?): Flow<List<Film>>

    @Query("SELECT COUNT(*) FROM films WHERE (:category IS NULL OR category = :category) AND (:isWatched IS NULL OR isWatched = :isWatched)")
    fun getFilteredFilmsCount(category: String?, isWatched: Boolean?): Flow<Int>

    @Query("SELECT * FROM films WHERE id = :id")
    suspend fun getFilmById(id: Long): Film?

    @Insert
    suspend fun insert(film: Film): Long

    @Update
    suspend fun update(film: Film)


    @Delete
    suspend fun delete(film: Film)
}

================
File: app/src/main/java/com/example/s24825/data/database/FilmDatabase.kt
================
package com.example.s24825.data.database

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.sqlite.db.SupportSQLiteDatabase
import com.example.filmoteka.util.Converters
import com.example.s24825.data.dao.FilmDao
import com.example.s24825.data.entity.Film
import com.example.s24825.data.entity.FilmCategories
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.Calendar

@Database(entities = [Film::class], version = 1, exportSchema = false)

@TypeConverters(Converters::class)
abstract class FilmDatabase : RoomDatabase() {

    abstract fun filmDao(): FilmDao

    companion object {

        @Volatile
        private var INSTANCE: FilmDatabase? = null

        fun getDatabase(context: Context, scope: CoroutineScope): FilmDatabase {

            return INSTANCE ?: synchronized(this) {

                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    FilmDatabase::class.java,
                    "film_database"
                )
                    .fallbackToDestructiveMigration()
                    .addCallback(FilmDatabaseCallback(scope))
                    .build()

                INSTANCE = instance
                instance
            }
        }


        private class FilmDatabaseCallback(

            private val scope: CoroutineScope

        ) : Callback() {

            override fun onCreate(db: SupportSQLiteDatabase) {
                super.onCreate(db)

                INSTANCE?.let { database ->
                    scope.launch(Dispatchers.IO) {
                        populateDatabase(database.filmDao())
                    }
                }
            }
        }

        private suspend fun populateDatabase(filmDao: FilmDao) {

            val calendar = Calendar.getInstance()

            calendar.set(2010, Calendar.JULY, 16)
            filmDao.insert(
                Film(
                    title = "Incepcja",
                    releaseDate = calendar.time,
                    category = FilmCategories.FILM,
                    isWatched = true,
                    rating = 9,
                    comment = "Świetny film o snach i rzeczywistości.",
                    posterPath = null
                )
            )

            calendar.set(2011, Calendar.APRIL, 17)
            filmDao.insert(
                Film(
                    title = "Gra o Tron",
                    releaseDate = calendar.time,
                    category = FilmCategories.SERIAL,
                    isWatched = true,
                    rating = 8,
                    comment = "Epicki serial fantasy oparty na książkach George'a R.R. Martina.",
                    posterPath = null
                )
            )

            calendar.set(2006, Calendar.MARCH, 5)
            filmDao.insert(
                Film(
                    title = "Planeta Ziemia",
                    releaseDate = calendar.time,
                    category = FilmCategories.DOKUMENT,
                    isWatched = false,
                    rating = null,
                    comment = null,
                    posterPath = null
                )
            )

            calendar.set(1994, Calendar.SEPTEMBER, 23)
            filmDao.insert(
                Film(
                    title = "Skazani na Shawshank",
                    releaseDate = calendar.time,
                    category = FilmCategories.FILM,
                    isWatched = true,
                    rating = 10,
                    comment = "Jeden z najlepszych filmów wszech czasów.",
                    posterPath = null
                )
            )

            calendar.set(2008, Calendar.JANUARY, 20)
            filmDao.insert(
                Film(
                    title = "Breaking Bad",
                    releaseDate = calendar.time,
                    category = FilmCategories.SERIAL,
                    isWatched = false,
                    rating = null,
                    comment = null,
                    posterPath = null
                )
            )
        }
    }
}

================
File: app/src/main/java/com/example/s24825/data/entity/Film.kt
================
package com.example.s24825.data.entity

import androidx.room.Entity
import androidx.room.PrimaryKey
import java.util.Date


@Entity(tableName = "films")

//klasa danych, automatycznie generuje settery, gettery, equals, hashCode, toString
data class Film(
    @PrimaryKey(autoGenerate = true)
    val id: Long = 0,

    val title: String,

    val releaseDate: Date,

    val category: String,

    val isWatched: Boolean = false,

    val rating: Int? = null,

    val comment: String? = null,

    val posterPath: String? = null
)


// tworzy statyczną listę kategorii filmów

object FilmCategories {
    const val FILM = "Film"
    const val SERIAL = "Serial"
    const val DOKUMENT = "Dokument"

    val categories = listOf(FILM, SERIAL, DOKUMENT)
}

================
File: app/src/main/java/com/example/s24825/data/repository/FilmRepository.kt
================
package com.example.s24825.data.repository

import com.example.s24825.data.dao.FilmDao
import com.example.s24825.data.entity.Film
import kotlinx.coroutines.flow.Flow


class FilmRepository(private val filmDao: FilmDao) {

    val allFilms: Flow<List<Film>> = filmDao.getAllFilms()


    fun getFilteredFilms(category: String?, isWatched: Boolean?): Flow<List<Film>> {
        return filmDao.getFilteredFilms(category, isWatched)
    }


    fun getFilteredFilmsCount(category: String?, isWatched: Boolean?): Flow<Int> {
        return filmDao.getFilteredFilmsCount(category, isWatched)
    }

    suspend fun getFilmById(id: Long): Film? {
        return filmDao.getFilmById(id)
    }


    suspend fun insertFilm(film: Film): Long {
        return filmDao.insert(film)
    }


    suspend fun updateFilm(film: Film) {
        filmDao.update(film)
    }


    suspend fun deleteFilm(film: Film) {
        filmDao.delete(film)
    }
}

================
File: app/src/main/java/com/example/s24825/FilmotekaApplication.kt
================
package com.example.s24825

import android.app.Application
import com.example.s24825.data.database.FilmDatabase
import com.example.s24825.data.repository.FilmRepository
import com.example.s24825.util.ImageUtils
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.SupervisorJob


class FilmotekaApplication : Application() {

    val applicationScope = CoroutineScope(SupervisorJob())

    val database by lazy {
        FilmDatabase.getDatabase(this, applicationScope)
    }

    val repository by lazy {
        FilmRepository(database.filmDao())
    }

    val imageUtils by lazy {
        ImageUtils(this)
    }
}

================
File: app/src/main/java/com/example/s24825/ui/addedit/AddEditFilmScreen.kt
================
package com.example.s24825.ui.addedit

import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.DateRange
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.example.s24825.FilmotekaApplication
import com.example.s24825.data.entity.FilmCategories
import java.text.SimpleDateFormat
import java.util.*

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddEditFilmScreen(
    filmId: Long,
    onBackClick: () -> Unit,
    onSaveClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    // Get ViewModel
    val context = LocalContext.current
    val app = context.applicationContext as FilmotekaApplication
    val viewModel: FilmEditViewModel = viewModel(
        factory = FilmEditViewModel.Factory(app.repository, filmId, app.imageUtils)
    )

    // Collect state
    val title by viewModel.title.collectAsState()
    val releaseDate by viewModel.releaseDate.collectAsState()
    val category by viewModel.category.collectAsState()
    val isWatched by viewModel.isWatched.collectAsState()
    val rating by viewModel.rating.collectAsState()
    val comment by viewModel.comment.collectAsState()
    val posterPath by viewModel.posterPath.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val validationErrors by viewModel.validationErrors.collectAsState()
    val isSaved by viewModel.isSaved.collectAsState()

    // Date formatting
    val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())

    // Handle image selection
    val imagePicker = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { viewModel.selectPoster(it) }
    }

    // Handle navigation after save
    LaunchedEffect(isSaved) {
        if (isSaved) {
            onSaveClick()
        }
    }

    // Category dropdown state
    var showCategoryDropdown by remember { mutableStateOf(false) }

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(if (filmId > 0) "Edytuj film" else "Dodaj nowy film")
                },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Powrót"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { innerPadding ->
        Box(
            modifier = modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            if (isLoading) {
                // Loading indicator
                CircularProgressIndicator(
                    modifier = Modifier.align(Alignment.Center)
                )
            } else {
                // Form content
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .verticalScroll(rememberScrollState())
                        .padding(16.dp)
                ) {
                    // Title field
                    OutlinedTextField(
                        value = title,
                        onValueChange = { viewModel.setTitle(it) },
                        label = { Text("Tytuł") },
                        modifier = Modifier.fillMaxWidth(),
                        isError = validationErrors.containsKey("title"),
                        supportingText = {
                            if (validationErrors.containsKey("title")) {
                                Text(text = validationErrors["title"] ?: "")
                            }
                        }
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    // Date picker field
                    OutlinedTextField(
                        value = dateFormat.format(releaseDate),
                        onValueChange = { },
                        label = { Text("Data premiery") },
                        modifier = Modifier.fillMaxWidth(),
                        readOnly = true,
                        trailingIcon = {
                            Icon(
                                imageVector = Icons.Default.DateRange,  // Changed from CalendarMonth to DateRange
                                contentDescription = "Wybierz datę"
                            )
                        },
                        isError = validationErrors.containsKey("releaseDate"),
                        supportingText = {
                            if (validationErrors.containsKey("releaseDate")) {
                                Text(text = validationErrors["releaseDate"] ?: "")
                            }
                        }
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    // Category dropdown
                    Box(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        OutlinedTextField(
                            value = category,
                            onValueChange = { },
                            label = { Text("Kategoria") },
                            modifier = Modifier.fillMaxWidth(),
                            readOnly = true,
                            trailingIcon = {
                                Icon(
                                    imageVector = Icons.Default.ArrowDropDown,
                                    contentDescription = "Wybierz kategorię"
                                )
                            },
                            isError = validationErrors.containsKey("category"),
                            supportingText = {
                                if (validationErrors.containsKey("category")) {
                                    Text(text = validationErrors["category"] ?: "")
                                }
                            }
                        )

                        // Invisible clickable overlay to open dropdown
                        Box(
                            modifier = Modifier
                                .matchParentSize()
                                .clickable { showCategoryDropdown = true }
                        )

                        DropdownMenu(
                            expanded = showCategoryDropdown,
                            onDismissRequest = { showCategoryDropdown = false }
                        ) {
                            FilmCategories.categories.forEach { categoryOption ->
                                DropdownMenuItem(
                                    text = { Text(categoryOption) },
                                    onClick = {
                                        viewModel.setCategory(categoryOption)
                                        showCategoryDropdown = false
                                    }
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Watched status switch
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text(
                            text = "Status",
                            style = MaterialTheme.typography.bodyLarge
                        )

                        Spacer(modifier = Modifier.weight(1f))

                        Text(
                            text = if (isWatched) "Obejrzany" else "Nieobejrzany",
                            style = MaterialTheme.typography.bodyMedium
                        )

                        Spacer(modifier = Modifier.width(8.dp))

                        Switch(
                            checked = isWatched,
                            onCheckedChange = { viewModel.setWatched(it) }
                        )
                    }

                    // Rating field (only shown when watched is true)
                    if (isWatched) {
                        Spacer(modifier = Modifier.height(16.dp))

                        OutlinedTextField(
                            value = rating?.toString() ?: "",
                            onValueChange = {
                                val newRating = it.toIntOrNull()
                                if (newRating == null || (newRating in 1..10)) {
                                    viewModel.setRating(newRating)
                                }
                            },
                            label = { Text("Ocena (1-10)") },
                            modifier = Modifier.fillMaxWidth(),
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            isError = validationErrors.containsKey("rating"),
                            supportingText = {
                                if (validationErrors.containsKey("rating")) {
                                    Text(text = validationErrors["rating"] ?: "")
                                } else {
                                    Text("Wprowadź ocenę od 1 do 10")
                                }
                            }
                        )
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Comment field
                    OutlinedTextField(
                        value = comment,
                        onValueChange = { viewModel.setComment(it) },
                        label = { Text("Komentarz") },
                        modifier = Modifier.fillMaxWidth(),
                        minLines = 3
                    )

                    Spacer(modifier = Modifier.height(16.dp))

                    // Poster selection
                    Text(
                        text = "Plakat",
                        style = MaterialTheme.typography.bodyLarge
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // Poster preview or selection button
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(200.dp)
                            .clip(RoundedCornerShape(8.dp))
                            .border(
                                width = 1.dp,
                                color = MaterialTheme.colorScheme.outline,
                                shape = RoundedCornerShape(8.dp)
                            )
                            .clickable { imagePicker.launch("image/*") },
                        contentAlignment = Alignment.Center
                    ) {
                        if (posterPath != null) {
                            // Show selected poster
                            AsyncImage(
                                model = ImageRequest.Builder(LocalContext.current)
                                    .data(posterPath)
                                    .crossfade(true)
                                    .build(),
                                contentDescription = "Film Poster",
                                contentScale = ContentScale.Fit,
                                modifier = Modifier.fillMaxSize()
                            )
                        } else {
                            // Show selection prompt
                            Column(
                                horizontalAlignment = Alignment.CenterHorizontally
                            ) {
                                Icon(
                                    imageVector = Icons.Default.PlayArrow,  // Changed from PlayCircle to PlayArrow
                                    contentDescription = "No Poster",
                                    tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),
                                    modifier = Modifier
                                        .size(40.dp)
                                )

                                Spacer(modifier = Modifier.height(8.dp))

                                Text(
                                    text = "Wybierz plakat z galerii",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(24.dp))

                    // Save button
                    Button(
                        onClick = { viewModel.saveFilm() },
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text("Zapisz")
                    }
                }
            }
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/addedit/FilmEditViewModel.kt
================
package com.example.s24825.ui.addedit

import android.net.Uri
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.s24825.data.entity.Film
import com.example.s24825.data.entity.FilmCategories
import com.example.s24825.data.repository.FilmRepository
import com.example.s24825.util.ImageUtils
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.util.Calendar
import java.util.Date

/**
 * ViewModel for adding or editing a film.
 *
 * This ViewModel handles the business logic for creating new films or editing
 * existing unwatched films, including validation, image selection, and
 * saving operations.
 */
class FilmEditViewModel(
    private val repository: FilmRepository,
    private val filmId: Long = 0, // 0 indicates a new film
    private val imageUtils: ImageUtils
) : ViewModel() {

    // UI state flows for form fields
    private val _title = MutableStateFlow("")
    val title: StateFlow<String> = _title

    private val _releaseDate = MutableStateFlow(Date())
    val releaseDate: StateFlow<Date> = _releaseDate

    private val _category = MutableStateFlow("")
    val category: StateFlow<String> = _category

    private val _isWatched = MutableStateFlow(false)
    val isWatched: StateFlow<Boolean> = _isWatched

    private val _rating = MutableStateFlow<Int?>(null)
    val rating: StateFlow<Int?> = _rating

    private val _comment = MutableStateFlow("")
    val comment: StateFlow<String> = _comment

    private val _posterPath = MutableStateFlow<String?>(null)
    val posterPath: StateFlow<String?> = _posterPath

    // Loading and error states
    private val _isLoading = MutableStateFlow(filmId > 0)
    val isLoading: StateFlow<Boolean> = _isLoading

    private val _validationErrors = MutableStateFlow<Map<String, String>>(emptyMap())
    val validationErrors: StateFlow<Map<String, String>> = _validationErrors

    private val _isSaved = MutableStateFlow(false)
    val isSaved: StateFlow<Boolean> = _isSaved

    private var originalFilm: Film? = null

    init {
        if (filmId > 0) {
            // Load existing film if editing
            loadFilm()
        }
    }

    /**
     * Loads an existing film's data for editing.
     */
    private fun loadFilm() {
        viewModelScope.launch {
            _isLoading.value = true

            repository.getFilmById(filmId)?.let { film ->
                originalFilm = film

                _title.value = film.title
                _releaseDate.value = film.releaseDate
                _category.value = film.category
                _isWatched.value = film.isWatched
                _rating.value = film.rating
                _comment.value = film.comment ?: ""
                _posterPath.value = film.posterPath
            }

            _isLoading.value = false
        }
    }

    /**
     * Updates the title field.
     */
    fun setTitle(title: String) {
        _title.value = title
    }

    /**
     * Updates the release date field.
     */
    fun setReleaseDate(date: Date) {
        _releaseDate.value = date
    }

    /**
     * Updates the category field.
     */
    fun setCategory(category: String) {
        _category.value = category
    }

    /**
     * Updates the watched status field.
     */
    fun setWatched(isWatched: Boolean) {
        _isWatched.value = isWatched
    }

    /**
     * Updates the rating field.
     */
    fun setRating(rating: Int?) {
        _rating.value = rating
    }

    /**
     * Updates the comment field.
     */
    fun setComment(comment: String) {
        _comment.value = comment
    }

    /**
     * Handles selection of a poster image from the gallery.
     * Saves the image to the app's storage and updates the poster path.
     */
    fun selectPoster(uri: Uri) {
        viewModelScope.launch {
            val path = imageUtils.saveImageFromUri(uri)
            _posterPath.value = path
        }
    }

    /**
     * Validates the form data before saving.
     * @return True if all validations pass, false otherwise
     */
    private fun validateForm(): Boolean {
        val errors = mutableMapOf<String, String>()

        // Title cannot be empty
        if (_title.value.isBlank()) {
            errors["title"] = "Tytuł nie może być pusty"
        }

        // Release date cannot be more than 2 years in the future
        val calendar = Calendar.getInstance()
        calendar.add(Calendar.YEAR, 2)
        val twoYearsFromNow = calendar.time

        if (_releaseDate.value.after(twoYearsFromNow)) {
            errors["releaseDate"] = "Data premiery nie może być późniejsza niż 2 lata od dziś"
        }

        // Category must be selected
        if (_category.value.isBlank() || !FilmCategories.categories.contains(_category.value)) {
            errors["category"] = "Kategoria musi być wybrana"
        }

        // Rating must be provided if film is marked as watched
        if (_isWatched.value && _rating.value == null) {
            errors["rating"] = "Ocena jest wymagana dla obejrzanych filmów"
        }

        _validationErrors.value = errors
        return errors.isEmpty()
    }

    /**
     * Saves the film (creates a new one or updates an existing one).
     * Performs validation before saving.
     */
    fun saveFilm() {
        if (!validateForm()) {
            return
        }

        viewModelScope.launch {
            val film = Film(
                id = filmId,
                title = _title.value,
                releaseDate = _releaseDate.value,
                category = _category.value,
                isWatched = _isWatched.value,
                rating = if (_isWatched.value) _rating.value else null,
                comment = _comment.value.takeIf { it.isNotBlank() },
                posterPath = _posterPath.value
            )

            if (filmId > 0) {
                // Update existing film
                repository.updateFilm(film)
            } else {
                // Create new film
                repository.insertFilm(film)
            }

            _isSaved.value = true
        }
    }

    /**
     * Factory for creating FilmEditViewModel instances with dependencies.
     */
    class Factory(
        private val repository: FilmRepository,
        private val filmId: Long = 0,
        private val imageUtils: ImageUtils
    ) : ViewModelProvider.Factory {
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(FilmEditViewModel::class.java)) {
                @Suppress("UNCHECKED_CAST")
                return FilmEditViewModel(repository, filmId, imageUtils) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/components/FilmItem.kt
================
package com.example.s24825.ui.components

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.example.s24825.data.entity.Film
import java.text.SimpleDateFormat
import java.util.Locale

/**
 * Composable for displaying a single film item in the list.
 *
 * This component shows the film's poster, title, release date,
 * category, and watching status/rating. It handles both click
 * and long-click events.
 */
@Composable
fun FilmItem(
    film: Film,
    onClick: () -> Unit,
    onLongClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())

    Card(
        modifier = modifier
            .fillMaxWidth()
            .padding(8.dp)
            .clickable { onClick() },
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .height(120.dp)
        ) {
            // Poster Image
            Box(
                modifier = Modifier
                    .width(80.dp)
                    .fillMaxHeight()
                    .clip(RoundedCornerShape(topStart = 8.dp, bottomStart = 8.dp))
                    .background(MaterialTheme.colorScheme.surfaceVariant)
            ) {
                if (film.posterPath != null) {
                    AsyncImage(
                        model = ImageRequest.Builder(LocalContext.current)
                            .data(film.posterPath)
                            .crossfade(true)
                            .build(),
                        contentDescription = "Film Poster",
                        contentScale = ContentScale.Crop,
                        modifier = Modifier.fillMaxSize()
                    )
                } else {
                    // Placeholder when no poster is available
                    Icon(
                        imageVector = Icons.Default.PlayArrow,  // Changed from PlayCircle to PlayArrow
                        contentDescription = "No Poster",
                        tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f),
                        modifier = Modifier
                            .size(40.dp)
                            .align(Alignment.Center)
                    )
                }
            }

            // Film details
            Column(
                modifier = Modifier
                    .fillMaxHeight()
                    .weight(1f)
                    .padding(horizontal = 12.dp, vertical = 8.dp)
            ) {
                // Title
                Text(
                    text = film.title,
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    maxLines = 1,
                    overflow = TextOverflow.Ellipsis
                )

                // Date
                Text(
                    text = "Premiera: ${dateFormat.format(film.releaseDate)}",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                // Category
                Text(
                    text = "Kategoria: ${film.category}",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )

                Spacer(modifier = Modifier.weight(1f))

                // Status row (watched/unwatched or rating)
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    if (film.isWatched) {
                        Icon(
                            imageVector = Icons.Default.Star,
                            contentDescription = "Rating",
                            tint = MaterialTheme.colorScheme.tertiary,
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(4.dp))
                        Text(
                            text = "Ocena: ${film.rating ?: "Brak"}",
                            style = MaterialTheme.typography.bodyMedium,
                            fontWeight = FontWeight.Bold
                        )
                    } else {
                        Text(
                            text = "Nieobejrzane",
                            style = MaterialTheme.typography.bodyMedium,
                            color = MaterialTheme.colorScheme.secondary
                        )
                    }
                }
            }
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/components/FilterOptions.kt
================
package com.example.s24825.ui.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.selection.toggleable
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.semantics.Role
import androidx.compose.ui.unit.dp
import com.example.s24825.data.entity.FilmCategories

/**
 * Composable for film list filtering options.
 *
 * This component provides UI for filtering films by category and watch status.
 * It uses Chip-style toggleable buttons for a modern, mobile-friendly interface.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FilterOptions(
    selectedCategory: String?,
    selectedWatchStatus: Boolean?,
    onCategorySelected: (String?) -> Unit,
    onWatchStatusSelected: (Boolean?) -> Unit,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier
            .fillMaxWidth()
            .padding(horizontal = 16.dp, vertical = 8.dp)
    ) {
        // Category filters
        Text(
            text = "Kategoria:",
            style = MaterialTheme.typography.titleSmall,
            color = MaterialTheme.colorScheme.onSurface
        )

        Spacer(modifier = Modifier.height(4.dp))

        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            modifier = Modifier.padding(vertical = 4.dp)
        ) {
            // "All" category filter
            FilterChip(
                selected = selectedCategory == null,
                onClick = { onCategorySelected(null) },
                label = { Text("Wszystkie") },
                colors = FilterChipDefaults.filterChipColors(
                    selectedContainerColor = MaterialTheme.colorScheme.primary,
                    selectedLabelColor = Color.White
                )
            )

            // Specific category filters
            FilmCategories.categories.forEach { category ->
                FilterChip(
                    selected = selectedCategory == category,
                    onClick = { onCategorySelected(category) },
                    label = { Text(category) },
                    colors = FilterChipDefaults.filterChipColors(
                        selectedContainerColor = MaterialTheme.colorScheme.primary,
                        selectedLabelColor = Color.White
                    )
                )
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        // Watch status filters
        Text(
            text = "Status:",
            style = MaterialTheme.typography.titleSmall,
            color = MaterialTheme.colorScheme.onSurface
        )

        Spacer(modifier = Modifier.height(4.dp))

        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            modifier = Modifier.padding(vertical = 4.dp)
        ) {
            // "All" status filter
            FilterChip(
                selected = selectedWatchStatus == null,
                onClick = { onWatchStatusSelected(null) },
                label = { Text("Wszystkie") },
                colors = FilterChipDefaults.filterChipColors(
                    selectedContainerColor = MaterialTheme.colorScheme.primary,
                    selectedLabelColor = Color.White
                )
            )

            // Watched filter
            FilterChip(
                selected = selectedWatchStatus == true,
                onClick = { onWatchStatusSelected(true) },
                label = { Text("Obejrzane") },
                colors = FilterChipDefaults.filterChipColors(
                    selectedContainerColor = MaterialTheme.colorScheme.primary,
                    selectedLabelColor = Color.White
                )
            )

            // Unwatched filter
            FilterChip(
                selected = selectedWatchStatus == false,
                onClick = { onWatchStatusSelected(false) },
                label = { Text("Nieobejrzane") },
                colors = FilterChipDefaults.filterChipColors(
                    selectedContainerColor = MaterialTheme.colorScheme.primary,
                    selectedLabelColor = Color.White
                )
            )
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/details/FilmDetailsScreen.kt
================
package com.example.s24825.ui.details

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Star
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.example.s24825.FilmotekaApplication
import java.text.SimpleDateFormat
import java.util.Locale

/**
 * Screen for displaying detailed information about a film.
 *
 * This screen is primarily used for viewed films which cannot be edited.
 * It shows all details about the film including poster, title, release date,
 * category, status, rating, and comments.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FilmDetailsScreen(
    filmId: Long,
    onBackClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    // Get ViewModel
    val context = LocalContext.current
    val app = context.applicationContext as FilmotekaApplication
    val viewModel: FilmDetailViewModel = viewModel(
        factory = FilmDetailViewModel.Factory(app.repository, filmId)
    )

    // Collect state
    val film by viewModel.film.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()

    val dateFormat = SimpleDateFormat("dd.MM.yyyy", Locale.getDefault())

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Szczegóły filmu") },
                navigationIcon = {
                    IconButton(onClick = onBackClick) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Powrót"
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary,
                    navigationIconContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        }
    ) { innerPadding ->
        Box(
            modifier = modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            if (isLoading) {
                // Loading indicator
                CircularProgressIndicator(
                    modifier = Modifier.align(Alignment.Center)
                )
            } else if (film == null) {
                // Error state - film not found
                Text(
                    text = "Nie znaleziono filmu",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center,
                    modifier = Modifier
                        .align(Alignment.Center)
                        .padding(16.dp)
                )
            } else {
                // Film details content
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .verticalScroll(rememberScrollState())
                        .padding(16.dp)
                ) {
                    // Poster image
                    if (film?.posterPath != null) {
                        AsyncImage(
                            model = ImageRequest.Builder(LocalContext.current)
                                .data(film?.posterPath)
                                .crossfade(true)
                                .build(),
                            contentDescription = "Film Poster",
                            contentScale = ContentScale.FillWidth,
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(240.dp)
                        )
                    } else {
                        // Placeholder when no poster is available
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(240.dp)
                                .align(Alignment.CenterHorizontally),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = "Brak plakatu",
                                style = MaterialTheme.typography.bodyLarge,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }

                    Spacer(modifier = Modifier.height(16.dp))

                    // Title
                    Text(
                        text = film?.title ?: "",
                        style = MaterialTheme.typography.headlineMedium,
                        fontWeight = FontWeight.Bold
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // Release date
                    film?.releaseDate?.let { date ->
                        Text(
                            text = "Data premiery: ${dateFormat.format(date)}",
                            style = MaterialTheme.typography.bodyLarge
                        )
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    // Category
                    Text(
                        text = "Kategoria: ${film?.category}",
                        style = MaterialTheme.typography.bodyLarge
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // Status and rating
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Status: ${if (film?.isWatched == true) "Obejrzany" else "Nieobejrzany"}",
                            style = MaterialTheme.typography.bodyLarge
                        )

                        if (film?.isWatched == true && film?.rating != null) {
                            Spacer(modifier = Modifier.width(16.dp))
                            Icon(
                                imageVector = Icons.Default.Star,
                                contentDescription = "Rating",
                                tint = MaterialTheme.colorScheme.tertiary
                            )
                            Spacer(modifier = Modifier.width(4.dp))
                            Text(
                                text = "Ocena: ${film?.rating}",
                                style = MaterialTheme.typography.bodyLarge,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }

                    // Comment section
                    if (!film?.comment.isNullOrBlank()) {
                        Spacer(modifier = Modifier.height(16.dp))
                        Surface(
                            modifier = Modifier.fillMaxWidth(),
                            color = MaterialTheme.colorScheme.surfaceVariant,
                            shape = MaterialTheme.shapes.medium
                        ) {
                            Column(modifier = Modifier.padding(16.dp)) {
                                Text(
                                    text = "Komentarz:",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Bold
                                )

                                Spacer(modifier = Modifier.height(8.dp))

                                Text(
                                    text = film?.comment ?: "",
                                    style = MaterialTheme.typography.bodyLarge
                                )
                            }
                        }
                    }

                    // Read-only information
                    Spacer(modifier = Modifier.height(24.dp))
                    Surface(
                        modifier = Modifier.fillMaxWidth(),
                        color = MaterialTheme.colorScheme.errorContainer,
                        shape = MaterialTheme.shapes.small
                    ) {
                        Text(
                            text = "Ten film jest oznaczony jako obejrzany i nie może być edytowany.",
                            style = MaterialTheme.typography.bodyMedium,
                            textAlign = TextAlign.Center,
                            modifier = Modifier.padding(8.dp)
                        )
                    }
                }
            }
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/details/FilmDetailViewModel.kt
================
package com.example.s24825.ui.details

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.s24825.data.entity.Film
import com.example.s24825.data.repository.FilmRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel for the film detail screen.
 *
 * This ViewModel handles loading and displaying a single film's details.
 * It's used for the read-only view of a film (particularly watched films).
 */
class FilmDetailViewModel(
    private val repository: FilmRepository,
    private val filmId: Long
) : ViewModel() {

    private val _film = MutableStateFlow<Film?>(null)
    val film: StateFlow<Film?> = _film

    private val _isLoading = MutableStateFlow(true)
    val isLoading: StateFlow<Boolean> = _isLoading

    init {
        loadFilm()
    }

    /**
     * Loads the film details from the repository.
     */
    private fun loadFilm() {
        viewModelScope.launch {
            _isLoading.value = true
            _film.value = repository.getFilmById(filmId)
            _isLoading.value = false
        }
    }

    /**
     * Factory for creating FilmDetailViewModel instances with dependencies.
     */
    class Factory(
        private val repository: FilmRepository,
        private val filmId: Long
    ) : ViewModelProvider.Factory {
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(FilmDetailViewModel::class.java)) {
                @Suppress("UNCHECKED_CAST")
                return FilmDetailViewModel(repository, filmId) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/list/FilmListScreen.kt
================
package com.example.s24825.ui.list

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.s24825.FilmotekaApplication
import com.example.s24825.ui.components.FilterOptions
import com.example.s24825.ui.components.FilmItem
import kotlinx.coroutines.flow.collectLatest

/**
 * Main screen showing the list of films with filtering options.
 *
 * This screen displays a list of all films in the database,
 * with the ability to filter by category and watch status.
 * It also shows the count of films matching the current filters.
 */
@OptIn(ExperimentalMaterial3Api::class)

@Composable
fun FilmListScreen(
    onFilmClick: (Long, Boolean) -> Unit,
    onAddClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    // Get ViewModel
    val context = LocalContext.current
    val app = context.applicationContext as FilmotekaApplication
    val viewModel: FilmListViewModel = viewModel(
        factory = FilmListViewModel.Factory(app.repository)
    )

    // Collect state
    val films by viewModel.filteredFilms.collectAsState(initial = emptyList())
    val selectedCategory by viewModel.selectedCategory.collectAsState()
    val selectedWatchStatus by viewModel.selectedWatchStatus.collectAsState()
    val showDeleteDialog by viewModel.showDeleteDialog.collectAsState()

    // Item count state
    var itemCount by remember { mutableStateOf(0) }

    // Collect item count
    LaunchedEffect(selectedCategory, selectedWatchStatus) {
        viewModel.itemCount.collectLatest { countFlow ->
            countFlow.collectLatest { count ->
                itemCount = count
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Filmoteka") },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.primary,
                    titleContentColor = MaterialTheme.colorScheme.onPrimary
                )
            )
        },
        floatingActionButton = {
            FloatingActionButton(
                onClick = onAddClick,
                containerColor = MaterialTheme.colorScheme.primary
            ) {
                Icon(
                    imageVector = Icons.Default.Add,
                    contentDescription = "Dodaj film",
                    tint = MaterialTheme.colorScheme.onPrimary
                )
            }
        }
    )


    { innerPadding ->
        Column(
            modifier = modifier
                .fillMaxSize()
                .padding(innerPadding)
        ) {
            // Filter options
            FilterOptions(
                selectedCategory = selectedCategory,
                selectedWatchStatus = selectedWatchStatus,
                onCategorySelected = { viewModel.setCategory(it) },
                onWatchStatusSelected = { viewModel.setWatchStatus(it) }
            )

            // Item count
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 8.dp)
            ) {
                Text(
                    text = "Liczba pozycji: $itemCount",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }

            // Film list
            if (films.isEmpty()) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "Brak filmów spełniających wybrane kryteria",
                        style = MaterialTheme.typography.bodyLarge,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
            } else {
                LazyColumn(
                    modifier = Modifier.fillMaxSize(),
                    contentPadding = PaddingValues(bottom = 80.dp) // Extra padding for FAB
                ) {
                    items(films) { film ->
                        FilmItem(
                            film = film,
                            onClick = { onFilmClick(film.id, film.isWatched) },
                            onLongClick = { viewModel.showDeleteDialog(film) }
                        )
                    }
                }
            }
        }
    }

    // Delete confirmation dialog
    if (showDeleteDialog) {
        AlertDialog(
            onDismissRequest = { viewModel.dismissDeleteDialog() },
            title = { Text("Potwierdź usunięcie") },
            text = { Text("Czy na pewno chcesz usunąć ten film z kolekcji?") },
            confirmButton = {
                TextButton(onClick = { viewModel.deleteFilm() }) {
                    Text("Usuń")
                }
            },
            dismissButton = {
                TextButton(onClick = { viewModel.dismissDeleteDialog() }) {
                    Text("Anuluj")
                }
            }
        )
    }
}

================
File: app/src/main/java/com/example/s24825/ui/list/FilmListViewModel.kt
================
package com.example.s24825.ui.list

import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewModelScope
import com.example.s24825.data.entity.Film
import com.example.s24825.data.repository.FilmRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.launch

/**
 * ViewModel for the film list screen.
 *
 * This ViewModel holds UI state and handles business logic for the film list screen,
 * including filtering, counting, and deletion operations.
 */
class FilmListViewModel(private val repository: FilmRepository) : ViewModel() {

    // Filter state flows
    private val _selectedCategory = MutableStateFlow<String?>(null)
    val selectedCategory: StateFlow<String?> = _selectedCategory

    private val _selectedWatchStatus = MutableStateFlow<Boolean?>(null)
    val selectedWatchStatus: StateFlow<Boolean?> = _selectedWatchStatus

    // Film deletion dialog state
    private val _showDeleteDialog = MutableStateFlow(false)
    val showDeleteDialog: StateFlow<Boolean> = _showDeleteDialog

    private val _filmToDelete = MutableStateFlow<Film?>(null)

    // Combine filters with repository data to get filtered films
    val filteredFilms = combine(
        repository.allFilms,
        _selectedCategory,
        _selectedWatchStatus
    ) { films, category, watchStatus ->
        films.filter { film ->
            (category == null || film.category == category) &&
                    (watchStatus == null || film.isWatched == watchStatus)
        }
    }

    // Get the count of films matching current filters
    val itemCount = combine(
        _selectedCategory,
        _selectedWatchStatus
    ) { category, watchStatus ->
        repository.getFilteredFilmsCount(category, watchStatus)
    }.combine(repository.allFilms) { countFlow, _ -> countFlow }

    /**
     * Sets the category filter.
     * @param category The category to filter by, or null for all categories
     */
    fun setCategory(category: String?) {
        _selectedCategory.value = category
    }

    /**
     * Sets the watch status filter.
     * @param isWatched The watch status to filter by, or null for all statuses
     */
    fun setWatchStatus(isWatched: Boolean?) {
        _selectedWatchStatus.value = isWatched
    }

    /**
     * Shows the delete confirmation dialog for a film.
     * @param film The film to be deleted
     */
    fun showDeleteDialog(film: Film) {
        _filmToDelete.value = film
        _showDeleteDialog.value = true
    }

    /**
     * Dismisses the delete confirmation dialog.
     */
    fun dismissDeleteDialog() {
        _showDeleteDialog.value = false
        _filmToDelete.value = null
    }

    /**
     * Deletes the selected film and dismisses the dialog.
     */
    fun deleteFilm() {
        _filmToDelete.value?.let { film ->
            viewModelScope.launch {
                repository.deleteFilm(film)
                _showDeleteDialog.value = false
                _filmToDelete.value = null
            }
        }
    }

    /**
     * Factory for creating FilmListViewModel instances with the repository dependency.
     */
    class Factory(private val repository: FilmRepository) : ViewModelProvider.Factory {
        override fun <T : ViewModel> create(modelClass: Class<T>): T {
            if (modelClass.isAssignableFrom(FilmListViewModel::class.java)) {
                @Suppress("UNCHECKED_CAST")
                return FilmListViewModel(repository) as T
            }
            throw IllegalArgumentException("Unknown ViewModel class")
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/main/MainActivity.kt
================
package com.example.s24825.ui.main

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.example.s24825.ui.addedit.AddEditFilmScreen
import com.example.s24825.ui.details.FilmDetailsScreen
import com.example.s24825.ui.list.FilmListScreen
import com.example.s24825.ui.theme.FilmotekaTheme


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            FilmotekaTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    FilmotekaApp()
                }
            }
        }
    }
}


object FilmotekaDestinations {
    const val FILM_LIST_ROUTE = "film_list"
    const val FILM_DETAILS_ROUTE = "film_details"
    const val FILM_EDIT_ROUTE = "film_edit"
    const val FILM_ADD_ROUTE = "film_add"

    // Route with parameters
    const val FILM_DETAILS_ROUTE_WITH_ARGS = "film_details/{filmId}"
    const val FILM_EDIT_ROUTE_WITH_ARGS = "film_edit/{filmId}"

    // Arguments
    const val FILM_ID_ARG = "filmId"
}

@Composable
fun FilmotekaApp(
    navController: NavHostController = rememberNavController()
) {
    NavHost(
        navController = navController,
        startDestination = FilmotekaDestinations.FILM_LIST_ROUTE
    ) {
        // Film List Screen
        composable(FilmotekaDestinations.FILM_LIST_ROUTE) {
            FilmListScreen(
                onFilmClick = { filmId, isWatched ->
                    // If film is watched, go to details (read-only)
                    // Otherwise, go to edit screen
                    if (isWatched) {
                        navController.navigate("${FilmotekaDestinations.FILM_DETAILS_ROUTE}/$filmId")
                    } else {
                        navController.navigate("${FilmotekaDestinations.FILM_EDIT_ROUTE}/$filmId")
                    }
                },
                onAddClick = {
                    navController.navigate(FilmotekaDestinations.FILM_ADD_ROUTE)
                }
            )
        }

        // Film Details Screen (Read-only)
        composable(
            route = FilmotekaDestinations.FILM_DETAILS_ROUTE_WITH_ARGS,
            arguments = listOf(
                navArgument(FilmotekaDestinations.FILM_ID_ARG) {
                    type = NavType.LongType
                }
            )
        ) { backStackEntry ->
            val filmId = backStackEntry.arguments?.getLong(FilmotekaDestinations.FILM_ID_ARG) ?: 0L
            FilmDetailsScreen(
                filmId = filmId,
                onBackClick = {
                    navController.popBackStack()
                }
            )
        }

        // Film Edit Screen (For unwatched films)
        composable(
            route = FilmotekaDestinations.FILM_EDIT_ROUTE_WITH_ARGS,
            arguments = listOf(
                navArgument(FilmotekaDestinations.FILM_ID_ARG) {
                    type = NavType.LongType
                }
            )
        ) { backStackEntry ->
            val filmId = backStackEntry.arguments?.getLong(FilmotekaDestinations.FILM_ID_ARG) ?: 0L
            AddEditFilmScreen(
                filmId = filmId,
                onBackClick = {
                    navController.popBackStack()
                },
                onSaveClick = {
                    navController.popBackStack()
                }
            )
        }

        // Film Add Screen (For new films)
        composable(FilmotekaDestinations.FILM_ADD_ROUTE) {
            AddEditFilmScreen(
                filmId = 0L, // 0 means new film
                onBackClick = {
                    navController.popBackStack()
                },
                onSaveClick = {
                    navController.popBackStack()
                }
            )
        }
    }
}

================
File: app/src/main/java/com/example/s24825/ui/theme/Color.kt
================
// Color.kt
package com.example.s24825.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)

// Custom colors for our app
val FilmRed = Color(0xFFE50914)
val FilmBlue = Color(0xFF0071EB)
val FilmGreen = Color(0xFF46D369)
val FilmGrey = Color(0xFF808080)
val FilmBlack = Color(0xFF221F1F)

================
File: app/src/main/java/com/example/s24825/ui/theme/Theme.kt
================
// Theme.kt
package com.example.s24825.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.SideEffect
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.core.view.WindowCompat

private val DarkColorScheme = darkColorScheme(
    primary = FilmRed,
    secondary = FilmBlue,
    tertiary = FilmGreen,
    background = FilmBlack,
    surface = FilmBlack
)

private val LightColorScheme = lightColorScheme(
    primary = FilmRed,
    secondary = FilmBlue,
    tertiary = FilmGreen

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun FilmotekaTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }
    val view = LocalView.current
    if (!view.isInEditMode) {
        SideEffect {
            val window = (view.context as Activity).window
            window.statusBarColor = colorScheme.primary.toArgb()
            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = !darkTheme
        }
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}

================
File: app/src/main/java/com/example/s24825/ui/theme/Type.kt
================
// Type.kt
package com.example.s24825.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)

================
File: app/src/main/java/com/example/s24825/util/Converters.kt
================
package com.example.filmoteka.util

import androidx.room.TypeConverter
import java.util.Date


class Converters {

    @TypeConverter
    fun fromTimestamp(value: Long?): Date? {
        return value?.let { Date(it) }
    }

    @TypeConverter
    fun dateToTimestamp(date: Date?): Long? {
        return date?.time
    }
}

================
File: app/src/main/java/com/example/s24825/util/ImageUtils.kt
================
package com.example.s24825.util

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.io.IOException
import java.util.UUID

/**
 * Utility class for handling image operations.
 *
 * This class provides functionality for saving images from gallery to the app's
 * internal storage, loading images, and managing image files.
 */
class ImageUtils(private val context: Context) {

    /**
     * Directory name for storing poster images.
     */
    private val POSTERS_DIR = "posters"

    /**
     * Gets the directory for storing poster images.
     */
    private fun getPosterDirectory(): File {
        val dir = File(context.filesDir, POSTERS_DIR)
        if (!dir.exists()) {
            dir.mkdirs()
        }
        return dir
    }

    /**
     * Generates a unique filename for a new poster image.
     */
    private fun generateImageFilename(): String {
        return "poster_${UUID.randomUUID()}.jpg"
    }

    /**
     * Saves an image from a Uri to the app's internal storage.
     *
     * @param uri Uri of the image to save (from gallery picker)
     * @return Path to the saved image file, or null if saving failed
     */
    suspend fun saveImageFromUri(uri: Uri): String? = withContext(Dispatchers.IO) {
        try {
            // Open an input stream from the Uri
            context.contentResolver.openInputStream(uri)?.use { inputStream ->
                // Create a file in the app's internal storage
                val file = File(getPosterDirectory(), generateImageFilename())

                // Save the image to the file
                FileOutputStream(file).use { outputStream ->
                    inputStream.copyTo(outputStream)
                }

                // Return the absolute path to the saved file
                return@withContext file.absolutePath
            }
        } catch (e: IOException) {
            Log.e("ImageUtils", "Error saving image", e)
        }
        return@withContext null
    }

    /**
     * Loads a bitmap from a file path.
     *
     * @param path Path to the image file
     * @return The loaded Bitmap, or null if loading failed
     */
    suspend fun loadImageFromPath(path: String): Bitmap? = withContext(Dispatchers.IO) {
        try {
            return@withContext BitmapFactory.decodeFile(path)
        } catch (e: Exception) {
            Log.e("ImageUtils", "Error loading image", e)
            return@withContext null
        }
    }

    /**
     * Deletes an image file.
     *
     * @param path Path to the image file to delete
     * @return True if deletion was successful, false otherwise
     */
    suspend fun deleteImage(path: String): Boolean = withContext(Dispatchers.IO) {
        try {
            val file = File(path)
            if (file.exists()) {
                return@withContext file.delete()
            }
        } catch (e: Exception) {
            Log.e("ImageUtils", "Error deleting image", e)
        }
        return@withContext false
    }
}

================
File: app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>

================
File: app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================
File: app/src/main/res/values/strings.xml
================
<resources>
    <string name="app_name">Filmoteka</string>
    <string name="film_list">Lista filmów</string>
    <string name="film_details">Szczegóły filmu</string>
    <string name="add_film">Dodaj film</string>
    <string name="edit_film">Edytuj film</string>
    <string name="save">Zapisz</string>
    <string name="back">Powrót</string>
    <string name="delete">Usuń</string>
    <string name="cancel">Anuluj</string>
    <string name="confirm_delete">Potwierdź usunięcie</string>
    <string name="delete_confirm_message">Czy na pewno chcesz usunąć ten film z kolekcji?</string>
    <string name="title">Tytuł</string>
    <string name="release_date">Data premiery</string>
    <string name="category">Kategoria</string>
    <string name="status">Status</string>
    <string name="watched">Obejrzany</string>
    <string name="unwatched">Nieobejrzany</string>
    <string name="rating">Ocena (1-10)</string>
    <string name="comment">Komentarz</string>
    <string name="poster">Plakat</string>
    <string name="select_poster">Wybierz plakat</string>
    <string name="no_poster">Brak plakatu</string>
    <string name="all">Wszystkie</string>
    <string name="item_count">Liczba pozycji: %1$d</string>
    <string name="no_films_matching">Brak filmów spełniających wybrane kryteria</string>
    <string name="read_only_message">Ten film jest oznaczony jako obejrzany i nie może być edytowany.</string>
    <string name="title_required">Tytuł jest wymagany</string>
    <string name="category_required">Kategoria musi być wybrana</string>
    <string name="rating_required">Ocena jest wymagana dla obejrzanych filmów</string>
    <string name="date_future_error">Data premiery nie może być późniejsza niż 2 lata od dziś</string>
</resources>

================
File: app/src/main/res/values/themes.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.S24825" parent="android:Theme.Material.Light.NoActionBar" />
</resources>

================
File: app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: app/src/test/java/com/example/s24825/ExampleUnitTest.kt
================
package com.example.s24825

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

================
File: build.gradle.kts
================
// Top-level build.gradle.kts
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    // Replace KAPT with KSP
    // alias(libs.plugins.kotlin.kapt) apply false
    id("com.google.devtools.ksp") version "1.9.22-1.0.17" apply false
}

================
File: gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.8.0"  # Use a stable version of AGP
kotlin = "1.9.22"  # Downgrade to a more stable Kotlin version
coreKtx = "1.12.0"
junit = "4.13.2"
junitVersion = "1.1.5"
espressoCore = "3.5.1"
lifecycleRuntimeKtx = "2.7.0"
activityCompose = "1.8.2"
composeBom = "2023.10.01"
ksp = "1.9.22-1.0.17"
room = "2.6.1"
coil = "2.5.0"
navigation = "2.7.7"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
# Room
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
androidx-room-ktx = { group = "androidx.room", name = "room-ktx", version.ref = "room" }
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
# Coil
coil-compose = { group = "io.coil-kt", name = "coil-compose", version.ref = "coil" }
# Navigation
androidx-navigation-compose = { group = "androidx.navigation", name = "navigation-compose", version.ref = "navigation" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
# kotlin-kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" } # Remove this
kotlin-ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" } # Add this

================
File: gradle/wrapper/gradle-wrapper.properties
================
#Mon Apr 14 09:09:22 CEST 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle.kts
================
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "Filmoteka"
include(":app")
